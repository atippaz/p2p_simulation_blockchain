import { spawn } from "child_process";
import { CreateNode } from "../objects/node";
import { AddressConnection } from "../objects/node/addressConnection";
import readline from "readline";
import { findAvailablePort } from "./generateUniquePort";

function inputLoop(peerList: AddressConnection[], terminal) {
  const rl = readline.createInterface({
    input: terminal.stdin,  // ใช้ stdin ของ terminal ที่ spawn ขึ้นมา
    output: terminal.stdout, // ใช้ stdout ของ terminal ที่ spawn ขึ้นมา
  });

  rl.on("line", async (input) => {
    let listFailed = [];
    let attemptCount = 0;
    const maxAttempts = 5;

    do {
      const promises = peerList.map((peer) => {
        return new Promise<void>((resolve) => {
          peer.connection.write(JSON.stringify(input));
          resolve();
        });
      });

      try {
        await Promise.allSettled(promises);
      } catch (ex: any) {
        console.log(ex);
      }

      attemptCount++;
    } while (listFailed.length > 0 && attemptCount < maxAttempts);

    if (listFailed.length > 0) {
      console.warn(`Failed to connect to peers: ${JSON.stringify(listFailed)}`);
    }
  });
}

async function main() {
  const portIpSeedNode = process.argv[2];
  const port = await findAvailablePort();
  const node = new CreateNode();
  node.start(port, portIpSeedNode);

  setInterval(() => {
    console.log(node.getPeerList());
    console.log(node.getConnection().map((x) => x.nodeId));
  }, 3000);

  // เปิด terminal ใหม่โดยใช้ spawn
  const terminal = spawn('cmd.exe', ['/K'], {
    stdio: ['pipe', 'pipe', 'pipe'],
  });

  terminal.stdout.on('data', (data) => {
    console.log(`Output from terminal: ${data}`);
  });

  terminal.stderr.on('data', (data) => {
    console.error(`Error from terminal: ${data}`);
  });

  terminal.on('close', (code) => {
    console.log(`Terminal closed with code ${code}`);
  });

  // ใช้ inputLoop จาก terminal ที่เปิดใหม่
  inputLoop(node.getConnection(), terminal);

  process.on("SIGINT", async () => {
    console.log("Received SIGINT. Terminating...");
    await node.terminate();
    process.exit();
  });

  process.on("SIGTERM", async () => {
    console.log("Received SIGTERM. Terminating...");
    await node.terminate();
    process.exit();
  });
}

main();

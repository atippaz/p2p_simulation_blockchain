import * as net from 'net';
import * as readline from 'readline';

// สร้าง Blockchain
class Block {
    index: number;
    timestamp: string;
    data: string;
    previousHash: string;
    hash: string;

    constructor(index: number, timestamp: string, data: string, previousHash = '') {
        this.index = index;
        this.timestamp = timestamp;
        this.data = data;
        this.previousHash = previousHash;
        this.hash = this.calculateHash();
    }

    calculateHash(): string {
        return crypto.createHash('sha256').update(this.index + this.previousHash + this.timestamp + this.data).digest('hex');
    }
}

class Blockchain {
    chain: Block[];

    constructor() {
        this.chain = [this.createGenesisBlock()];
    }

    createGenesisBlock(): Block {
        return new Block(0, new Date().toISOString(), "Genesis Block", "0");
    }

    getLatestBlock(): Block {
        return this.chain[this.chain.length - 1];
    }

    addBlock(newBlock: Block) {
        newBlock.previousHash = this.getLatestBlock().hash;
        newBlock.hash = newBlock.calculateHash();
        this.chain.push(newBlock);
    }
}

const blockchain = new Blockchain();
const peers: string[] = [];  // เก็บรายการ peers ที่เชื่อมต่อกัน

// ฟังก์ชัน broadcast ข้อความไปยัง peers อื่นๆ
function broadcastToPeers(message: string) {
    peers.forEach((peer) => {
        const [peerIp, peerPort] = peer.split(':');
        const client = new net.Socket();
        client.connect(Number(peerPort), peerIp, () => {
            client.write(message);
            client.end();
        });
    });
}

// ฟังก์ชันสร้าง Server สำหรับ Node
function createNode(port: number, peerPort?: number) {
    const server = net.createServer((socket) => {
        console.log(`Node on port ${port}: New connection established`);

        // เมื่อได้รับข้อมูลจาก peer อื่น
        socket.on('data', (data) => {
            const message = data.toString();
            console.log(`Node on port ${port}: Received message: ${message}`);
            blockchain.addBlock(new Block(blockchain.chain.length, new Date().toISOString(), message));
            console.log(`Node on port ${port}: Blockchain updated: ${JSON.stringify(blockchain.chain)}`);

            // ส่งต่อข้อมูลให้ peers อื่นๆ
            broadcastToPeers(message);
        });

        socket.on('end', () => {
            console.log(`Node on port ${port}: Connection closed`);
        });
    });

    // เริ่มฟังที่พอร์ตที่กำหนด
    server.listen(port, () => {
        console.log(`Node on port ${port}: Listening on port ${port}`);

        // ถ้ามี Peer Port ระบุ ให้เชื่อมต่อไปยัง Peer
        if (peerPort) {
            const client = new net.Socket();
            client.connect(peerPort, '127.0.0.1', () => {
                console.log(`Node on port ${port}: Connected to peer on port ${peerPort}`);
                client.write(`Hello from Node on port ${port}`);
                client.end();
            });
            peers.push(`127.0.0.1:${peerPort}`);
        }
    });
}

// การอ่านข้อมูลจาก command line เพื่อส่งไปยัง peers
function inputLoop(port: number) {
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });

    rl.on('line', (input) => {
        blockchain.addBlock(new Block(blockchain.chain.length, new Date().toISOString(), input));
        console.log(`Node on port ${port}: Added block with data: ${input}`);
        broadcastToPeers(input);
    });
}

// รัน Node ด้วยการระบุพอร์ต และพอร์ตของเพื่อนถ้ามี
const port = parseInt(process.argv[2]);
const peerPort = process.argv[3] ? parseInt(process.argv[3]) : undefined;

createNode(port, peerPort);
inputLoop(port);
